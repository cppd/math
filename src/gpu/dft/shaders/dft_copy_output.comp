/*
Copyright (C) 2017-2019 Topological Manifold

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

// Перенос данных ДПФ обратно в изображение.

// gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID

#if !defined(VULKAN)
// Вставляется в текст программы
// const uvec2 GROUP_SIZE =
// const float TO_MUL =
layout(local_size_x = GROUP_SIZE.x, local_size_y = GROUP_SIZE.y) in;
layout(bindless_image, rgba32f, location = 0) uniform writeonly restrict image2D dst_image;
#else
layout(local_size_x_id = 0, local_size_y_id = 1) in;
layout(constant_id = 2) const float TO_MUL = 1;
layout(binding = 1, rgba32f) uniform writeonly restrict image2D dst_image;
#endif

layout(std430, binding = 0) readonly restrict buffer Buffer
{
        complex src_data[];
};

void main()
{
        const ivec2 p = ivec2(gl_GlobalInvocationID.xy);

        if (any(greaterThanEqual(p, imageSize(dst_image))))
        {
                return;
        }

        const int width = imageSize(dst_image).x;

        complex d = src_data[p.y * width + p.x];
        vec4 pixel = vec4(vec3(TO_MUL * length(d)), 1);
        imageStore(dst_image, p, pixel);
}
