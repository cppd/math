/*
Copyright (C) 2017-2019 Topological Manifold

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

// gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID

#if !defined(VULKAN)
// Вставляется в текст программы
// const uvec2 GROUP_SIZE =
// const int FUNCTION_INDEX =
// const int N1 =
// const int N2 =
// const int M1 =
// const int M2 =
// const bool INVERSE =
layout(local_size_x = GROUP_SIZE.x, local_size_y = GROUP_SIZE.y) in;
#else
layout(constant_id = 0) const int FUNCTION_INDEX = 1;
layout(constant_id = 1) const int N1 = 1;
layout(constant_id = 2) const int N2 = 1;
layout(constant_id = 3) const int M1 = 1;
layout(constant_id = 4) const int M2 = 1;
layout(constant_id = 5) const bool INVERSE = true;
layout(local_size_x_id = 6, local_size_y_id = 7) in;
#endif

layout(std430, binding = 0) restrict buffer Buffer0
{
        complex data[];
};

layout(std430, binding = 1) restrict buffer Buffer1
{
        complex buf[];
};

// Функция подстановки переменных, формулы 13.4, 13.27, 13.28, 13.32.
// Используется в 4 функциях: по строкам в обе стороны и по столбцам в обе 2 стороны
complex mul_data(complex x, int l, int n)
{
        // float_point theta = ((INVERSE ? PI : -PI) * l * l) / n;

        // Вместо l * l / n нужно вычислить mod(l * l / n, 2), чтобы в тригонометрические функции
        // поступало не больше 2 * PI.
        // Также надо избежать вычисления l * l с плавающей точкой, так как может потеряться точность
        // при использовании float.
        // При l до sqrt(2 ^ 31) = 46340 результат умножения не переполнит dividend, а для данной
        // задачи 46340 достаточно.

        int dividend = l * l;
        int quotient = dividend / n;
        int remainder = dividend - quotient * n;

        // factor = (quotient mod 2) + (remainder / n).
        // float_point factor = (quotient & 1) + float_point(remainder) / n;
        // precise float_point theta = (INVERSE ? PI : -PI) * factor;
        // complex k = complex(cos(theta), sin(theta));
        // return complex_mul(k, x);

        float_point factor = float_point(remainder) / n;
        precise float_point theta = (INVERSE ? PI : -PI) * factor;
        if ((quotient & 1) == 0)
        {
                complex k = complex(cos(theta), sin(theta));
                return complex_mul(k, x);
        }
        else
        {
                complex k = complex(-cos(theta), -sin(theta));
                return complex_mul(k, x);
        }
}

void rows_mul_to_buffer()
{
        int i = int(gl_GlobalInvocationID.x);
        int j = int(gl_GlobalInvocationID.y);

        if (i >= M1 || j >= N2)
        {
                return;
        }

        if (i >= N1)
        {
                buf[j * M1 + i] = complex(0, 0);
        }
        else
        {
                complex x = data[j * N1 + i];
                buf[j * M1 + i] = mul_data(x, i, N1);
        }
}

void rows_mul_from_buffer()
{
        int i = int(gl_GlobalInvocationID.x);
        int j = int(gl_GlobalInvocationID.y);

        if (i >= N1 || j >= N2)
        {
                return;
        }

        complex x = buf[j * M1 + i];
        data[j * N1 + i] = mul_data(x, i, N1);
}

void columns_mul_to_buffer()
{
        int i = int(gl_GlobalInvocationID.x);
        int j = int(gl_GlobalInvocationID.y);

        if (j >= M2 || i >= N1)
        {
                return;
        }

        if (j >= N2)
        {
                // С транспонированием
                buf[i * M2 + j] = complex(0, 0);
        }
        else
        {
                complex x = data[j * N1 + i];
                // С транспонированием
                buf[i * M2 + j] = mul_data(x, j, N2);
        }
}

void columns_mul_from_buffer()
{
        int i = int(gl_GlobalInvocationID.x);
        int j = int(gl_GlobalInvocationID.y);

        if (j >= N2 || i >= N1)
        {
                return;
        }

        // С транспонированием
        complex x = buf[i * M2 + j];
        data[j * N1 + i] = mul_data(x, j, N2);
}

void main()
{
        if (FUNCTION_INDEX == 0)
        {
                rows_mul_to_buffer();
        }

        if (FUNCTION_INDEX == 1)
        {
                rows_mul_from_buffer();
        }

        if (FUNCTION_INDEX == 2)
        {
                columns_mul_to_buffer();
        }

        if (FUNCTION_INDEX == 3)
        {
                columns_mul_from_buffer();
        }
}
