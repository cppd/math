/*
Copyright (C) 2017-2020 Topological Manifold

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

// gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID

#if !defined(VULKAN)
// Вставляется в текст программы
// const uint GROUP_SIZE =
// const uint DATA_SIZE =
// const uint N_MASK =
// const uint N_BITS =
layout(local_size_x = GROUP_SIZE) in;
#else
layout(local_size_x_id = 0) in;
layout(constant_id = 1) const uint DATA_SIZE = 1;
layout(constant_id = 2) const uint N_MASK = 1;
layout(constant_id = 3) const uint N_BITS = 1;
#endif

layout(std430, binding = 0) buffer Buffer
{
        vec2 data[];
};

void main()
{
        uint thread_id = gl_GlobalInvocationID.x;

        if (thread_id >= DATA_SIZE)
        {
                return;
        }

        uint i = thread_id & N_MASK;
        uint n_base = thread_id - i;
        uint r = bit_reverse(i, N_BITS);

        if (i < r) // для исключения одинаковых обменов и уже сделанных обменов
        {
                uint i_index = n_base + i;
                uint r_index = n_base + r;
                vec2 t = data[i_index];
                data[i_index] = data[r_index];
                data[r_index] = t;
        }
}
