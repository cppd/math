/*
Copyright (C) 2017-2023 Topological Manifold

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#version 460

// Create DFT data from image data.

// gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID

layout(local_size_x_id = 0, local_size_y_id = 1) in;
layout(constant_id = 2) const int X = 1;
layout(constant_id = 3) const int Y = 1;
layout(constant_id = 4) const int WIDTH = 1;
layout(constant_id = 5) const int HEIGHT = 1;

layout(binding = 1) uniform sampler2D src;

layout(std430, binding = 0) writeonly restrict buffer Buffer
{
        vec2 dst[];
};

float luminance_of_rgb(const vec4 c)
{
        return 0.2126 * c.r + 0.7152 * c.g + 0.0722 * c.b;
}

void main()
{
        const ivec2 p = ivec2(gl_GlobalInvocationID.xy);

        if (any(greaterThanEqual(p, ivec2(WIDTH, HEIGHT))))
        {
                return;
        }

        const vec4 pixel = texelFetch(src, ivec2(p) + ivec2(X, Y), 0);
        const float l = luminance_of_rgb(pixel);
        dst[p.y * WIDTH + p.x] = vec2(l, 0);
}
