/*
Copyright (C) 2017-2023 Topological Manifold

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#version 460

#extension GL_GOOGLE_include_directive : enable
#include "math.glsl"

// gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID

layout(local_size_x_id = 0) in;
layout(constant_id = 1) const bool INVERSE = true;
layout(constant_id = 2) const uint DATA_SIZE = 1;
layout(constant_id = 3) const uint N = 1;

const uint N_DIV_2_MASK = N / 2 - 1;
const uint DATA_SIZE_2 = DATA_SIZE / 2;

layout(std140, binding = 0) restrict uniform Data
{
        uint m_div_2;
        float two_pi_div_m;
};

layout(std430, binding = 1) restrict buffer Buffer
{
        vec2 data[];
};

void main()
{
        const uint thread_id = gl_GlobalInvocationID.x;
        if (thread_id >= DATA_SIZE_2)
        {
                return;
        }

        const uint i = thread_id & N_DIV_2_MASK;
        const uint n_base = (thread_id - i) << 1;

        const uint idx = i & (m_div_2 - 1);
        const uint base = (i - idx) << 1;

        const uint index_t = n_base + base + idx;
        const uint index_u = index_t + m_div_2;

        const vec2 v_t = data[index_t];
        const vec2 v_u = data[index_u];

        if (!INVERSE)
        {
                const vec2 twiddle_factor = vec2(cos(two_pi_div_m * idx), -sin(two_pi_div_m * idx));
                const vec2 k = complex_mul(twiddle_factor, v_u);
                data[index_t] = v_t + k;
                data[index_u] = v_t - k;
        }
        else
        {
                const vec2 twiddle_factor = vec2(cos(two_pi_div_m * idx), sin(two_pi_div_m * idx));
                const vec2 k = complex_mul(twiddle_factor, v_u);
                data[index_t] = (v_t + k) * 0.5;
                data[index_u] = (v_t - k) * 0.5;
        }
}
