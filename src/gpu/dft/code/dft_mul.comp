/*
Copyright (C) 2017-2021 Topological Manifold

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#version 450

const float PI = 3.1415926535897932384626433832795028841971693993751;

// gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID

layout(constant_id = 0) const int FUNCTION_INDEX = 1;
layout(constant_id = 1) const int N1 = 1;
layout(constant_id = 2) const int N2 = 1;
layout(constant_id = 3) const int M1 = 1;
layout(constant_id = 4) const int M2 = 1;
layout(constant_id = 5) const bool INVERSE = true;
layout(local_size_x_id = 6, local_size_y_id = 7) in;

layout(std430, binding = 0) restrict buffer Data
{
        vec2 data[];
};

layout(std430, binding = 1) restrict buffer Buffer
{
        vec2 buf[];
};

vec2 complex_mul(vec2 a, vec2 b)
{
        return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

// Formulas 13.4, 13.27, 13.28, 13.32.
vec2 mul_data(vec2 x, int l, int n)
{
        // float theta = ((INVERSE ? PI : -PI) * l * l) / n;

        // Instead of l*l/n compute mod(l*l/n, 2) so that trigonometric
        // functions work with numbers no more than 2Ï€.
        // Avoid computing l*l using the float type. If l is less than
        // sqrt(2^31)=46340 then l*l is inside of the int range.

        int dividend = l * l;
        int quotient = dividend / n;
        int remainder = dividend - quotient * n;

        // factor = (quotient mod 2) + (remainder / n).
        // float factor = (quotient & 1) + float(remainder) / n;
        // precise float theta = (INVERSE ? PI : -PI) * factor;
        // vec2 k = vec2(cos(theta), sin(theta));
        // return complex_mul(k, x);

        float factor = float(remainder) / n;
        precise float theta = (INVERSE ? PI : -PI) * factor;
        if ((quotient & 1) == 0)
        {
                vec2 k = vec2(cos(theta), sin(theta));
                return complex_mul(k, x);
        }
        else
        {
                vec2 k = vec2(-cos(theta), -sin(theta));
                return complex_mul(k, x);
        }
}

void rows_mul_to_buffer()
{
        int i = int(gl_GlobalInvocationID.x);
        int j = int(gl_GlobalInvocationID.y);

        if (i >= M1 || j >= N2)
        {
                return;
        }

        if (i >= N1)
        {
                buf[j * M1 + i] = vec2(0, 0);
        }
        else
        {
                vec2 x = data[j * N1 + i];
                buf[j * M1 + i] = mul_data(x, i, N1);
        }
}

void rows_mul_from_buffer()
{
        int i = int(gl_GlobalInvocationID.x);
        int j = int(gl_GlobalInvocationID.y);

        if (i >= N1 || j >= N2)
        {
                return;
        }

        vec2 x = buf[j * M1 + i];
        data[j * N1 + i] = mul_data(x, i, N1);
}

// with transposition
void columns_mul_to_buffer()
{
        int i = int(gl_GlobalInvocationID.x);
        int j = int(gl_GlobalInvocationID.y);

        if (j >= M2 || i >= N1)
        {
                return;
        }

        if (j >= N2)
        {
                buf[i * M2 + j] = vec2(0, 0);
        }
        else
        {
                vec2 x = data[j * N1 + i];
                buf[i * M2 + j] = mul_data(x, j, N2);
        }
}

// with transposition
void columns_mul_from_buffer()
{
        int i = int(gl_GlobalInvocationID.x);
        int j = int(gl_GlobalInvocationID.y);

        if (j >= N2 || i >= N1)
        {
                return;
        }

        vec2 x = buf[i * M2 + j];
        data[j * N1 + i] = mul_data(x, j, N2);
}

void main()
{
        if (FUNCTION_INDEX == 0)
        {
                rows_mul_to_buffer();
        }

        if (FUNCTION_INDEX == 1)
        {
                rows_mul_from_buffer();
        }

        if (FUNCTION_INDEX == 2)
        {
                columns_mul_to_buffer();
        }

        if (FUNCTION_INDEX == 3)
        {
                columns_mul_from_buffer();
        }
}
