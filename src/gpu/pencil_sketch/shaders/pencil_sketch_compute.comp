/*
Copyright (C) 2017-2020 Topological Manifold

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

layout(local_size_x_id = 0, local_size_y_id = 0) in;
layout(constant_id = 1) const int X = 1;
layout(constant_id = 2) const int Y = 1;
layout(constant_id = 3) const int WIDTH = 1;
layout(constant_id = 4) const int HEIGHT = 1;
layout(binding = 0) uniform sampler2D src;
layout(binding = 1, r32f) writeonly uniform image2D img_output;
layout(binding = 2, r32ui) readonly uniform uimage2D img_objects;

const ivec2 X0 = ivec2(X, Y);
const ivec2 X1 = ivec2(X + WIDTH, Y + HEIGHT);

// clang-format off
//GaussianMatrix[{4, 3}]
const int delta = 4;
const float Gauss[delta * 2 + 1][delta * 2 + 1] =
{
        {0.00378449, 0.00564742, 0.00754943, 0.00900273, 0.00955004, 0.00900273, 0.00754943, 0.00564742, 0.00378449},
        {0.00564742, 0.00842740, 0.01126570, 0.01343440, 0.01425110, 0.01343440, 0.01126570, 0.00842740, 0.00564742},
        {0.00754943, 0.01126570, 0.01505990, 0.01795900, 0.01905080, 0.01795900, 0.01505990, 0.01126570, 0.00754943},
        {0.00900273, 0.01343440, 0.01795900, 0.02141610, 0.02271810, 0.02141610, 0.01795900, 0.01343440, 0.00900273},
        {0.00955004, 0.01425110, 0.01905080, 0.02271810, 0.02409920, 0.02271810, 0.01905080, 0.01425110, 0.00955004},
        {0.00900273, 0.01343440, 0.01795900, 0.02141610, 0.02271810, 0.02141610, 0.01795900, 0.01343440, 0.00900273},
        {0.00754943, 0.01126570, 0.01505990, 0.01795900, 0.01905080, 0.01795900, 0.01505990, 0.01126570, 0.00754943},
        {0.00564742, 0.00842740, 0.01126570, 0.01343440, 0.01425110, 0.01343440, 0.01126570, 0.00842740, 0.00564742},
        {0.00378449, 0.00564742, 0.00754943, 0.00900273, 0.00955004, 0.00900273, 0.00754943, 0.00564742, 0.00378449}
};
// clang-format on

// фоновые пиксели считать 0
const float background_value = 0;

bool is_background(ivec2 p)
{
        uvec4 s = imageLoad(img_objects, p);
        return s.r == 0;
}

float read_pixel(ivec2 p)
{
        return luminance_of_rgb(texelFetch(src, p, 0));
}

void save_pixel(ivec2 p, float v)
{
        imageStore(img_output, p - X0, vec4(v, v, v, 1));
}

bool point_inside(ivec2 p)
{
        return all(lessThanEqual(X0, p)) && all(lessThan(p, X1));
}

void main(void)
{
        const ivec2 p = X0 + ivec2(gl_GlobalInvocationID.xy);

        if (any(greaterThanEqual(p, X1)))
        {
                return;
        }

        const float s = read_pixel(p);

        if (is_background(p))
        {
                save_pixel(p, s);
                return;
        }

        float sum = 0;
        for (int i = -delta; i <= delta; ++i)
        {
                for (int j = -delta; j <= delta; ++j)
                {
                        const ivec2 p2 = ivec2(p.x + i, p.y + j);
                        const float s2 = (point_inside(p2) && !is_background(p2)) ? read_pixel(p2) : background_value;
                        sum += s2 * Gauss[i + delta][j + delta];
                }
        }

        float res;
        res = (sum != 0) ? (s / sum) : 1;
        // res = clamp ((res - 0.5f) / (1.0f - 0.5f), 0.0f, 1.0f);
        // res *= res;

        save_pixel(p, res);
}
