/*
Copyright (C) 2017-2022 Topological Manifold

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#version 460

// gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID

layout(local_size_x_id = 0) in;
layout(constant_id = 1) const int BUFFER_SIZE = 1;
layout(constant_id = 2) const int X = 1;
layout(constant_id = 3) const int Y = 1;
layout(constant_id = 4) const int WIDTH = 1;
layout(constant_id = 5) const int HEIGHT = 1;

layout(binding = 1, r32ui) readonly restrict uniform uimage2D objects;

layout(std430, binding = 0) writeonly restrict buffer Lines
{
        // Line for minimum: x = Lines[i], y = i
        // Line for maximum: x = Lines[i], y = i + HEIGHT
        int lines[2 * HEIGHT];
};

bool not_background(const int x, const int y)
{
        const uvec4 s = imageLoad(objects, ivec2(X + x, Y + y));
        return s.r != 0;
}

ivec2 min_max_x(const int local_id, const int y, const int group_size)
{
        int min_x = 1000000000;
        int max_x = -1000000000;
        for (int x = local_id; x < WIDTH; x += group_size)
        {
                if (not_background(x, y))
                {
                        min_x = min(min_x, x);
                        max_x = max(max_x, x);
                }
        }
        return ivec2(min_x, max_x);
}

// x for minimum values, y for maximum values
shared ivec2 shared_buffer[BUFFER_SIZE];

void main()
{
        // One group for one row
        // x = gl_LocalInvocationID.x
        // y = gl_WorkGroupID.x

        const int local_id = int(gl_LocalInvocationID.x);
        const int y = int(gl_WorkGroupID.x);
        const int group_size = int(gl_WorkGroupSize.x);

        shared_buffer[local_id] = min_max_x(local_id, y, group_size);

        barrier();

        for (int stride = group_size >> 1; stride >= 1; stride >>= 1)
        {
                if (local_id < stride)
                {
                        const ivec2 x1 = shared_buffer[local_id];
                        const ivec2 x2 = shared_buffer[local_id + stride];
                        shared_buffer[local_id] = ivec2(min(x1.x, x2.x), max(x1.y, x2.y));
                }
                barrier();
        }

        if (local_id == 0)
        {
                const ivec2 result = shared_buffer[0];
                if (result.y >= 0)
                {
                        lines[y] = result.x;
                        lines[y + HEIGHT] = result.y;
                }
                else
                {
                        lines[y] = -1;
                        lines[y + HEIGHT] = -1;
                }
        }
}
