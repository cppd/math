/*
Copyright (C) 2017-2020 Topological Manifold

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

// gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID

#if !defined(VULKAN)
// Вставляется в текст программы
// const int GROUP_SIZE =
// const int LINE_SIZE =
// const int ITERATION_COUNT =
layout(local_size_x = GROUP_SIZE) in;
#else
layout(constant_id = 0) const int LINE_SIZE = 1;
layout(constant_id = 1) const int ITERATION_COUNT = 1;
layout(local_size_x_id = 2) in;
#endif

layout(std430, binding = 0) restrict buffer Lines
{
        int lines[2 * LINE_SIZE];
};

shared float shared_buffer[LINE_SIZE];

void copy_to_buffer()
{
        int offset = int(gl_WorkGroupID.x) * LINE_SIZE;
        for (int i = int(gl_LocalInvocationID.x); i < LINE_SIZE; i += int(gl_WorkGroupSize.x))
        {
                shared_buffer[i] = lines[offset + i];
        }
}

void copy_from_buffer()
{
        int offset = int(gl_WorkGroupID.x) * LINE_SIZE;
        for (int i = int(gl_LocalInvocationID.x); i < LINE_SIZE; i += int(gl_WorkGroupSize.x))
        {
                lines[offset + i] = int(shared_buffer[i]);
        }
}

// Векторное произведение на плоскости (b-a)⨯(c-a).
// Точки по возрастанию a, b, c поворачивают налево, если больше 0
// Точки по возрастанию a, b, c поворачивают направо, если меньше 0
bool convex_ok(vec2 a, vec2 b, vec2 c)
{
        vec2 ab = b - a, ac = c - a;
        float v = ab.x * ac.y - ab.y * ac.x;
        return (gl_WorkGroupID.x == 0) ? v >= 0 : v <= 0;
}

bool find_forward(int high, inout int idx, inout float val)
{
        while (idx < high && (val = shared_buffer[idx]) < 0)
        {
                ++idx;
        }
        return (idx < high);
}
bool find_backward(int low, inout int idx, inout float val)
{
        while (idx >= low && (val = shared_buffer[idx]) < 0)
        {
                --idx;
        }
        return (idx >= low);
}

bool merge_forward(int a_i, float a, inout int b_i, inout float b, int high)
{
        bool merged = false;
        for (;;)
        {
                float c;
                int c_i = b_i + 1;
                if (!find_forward(high, c_i, c))
                {
                        return merged;
                }

                if (convex_ok(vec2(a_i, a), vec2(b_i, b), vec2(c_i, c)))
                {
                        return merged;
                }

                shared_buffer[b_i] = -1;
                b_i = c_i;
                b = c;
                merged = true;
        }
}

bool merge_backward(int low, inout int a_i, inout float a, int b_i, float b)
{
        bool merged = false;
        for (;;)
        {
                float c;
                int c_i = a_i - 1;
                if (!find_backward(low, c_i, c))
                {
                        return merged;
                }

                if (convex_ok(vec2(c_i, c), vec2(a_i, a), vec2(b_i, b)))
                {
                        return merged;
                }

                shared_buffer[a_i] = -1;
                a_i = c_i;
                a = c;
                merged = true;
        }
}

// low <= x < high
void process(int low, int right, int high)
{
        int left = right - 1;

        float a;
        int a_i = left;
        if (!find_backward(low, a_i, a))
        {
                return;
        }

        float b;
        int b_i = right;
        if (!find_forward(high, b_i, b))
        {
                return;
        }

        merge_forward(a_i, a, b_i, b, high);

        bool merged = true;

        while (merged)
        {
                merged = merge_backward(low, a_i, a, b_i, b);

                if (merged)
                {
                        merged = merge_forward(a_i, a, b_i, b, high);
                }
        }
}

void main(void)
{
        copy_to_buffer();

        int len = int(gl_WorkGroupSize.x << 2);
        int low = int(gl_LocalInvocationID.x << 2);
        int middle = low + 2;
        int high = low + 4;

        for (int i = 0; i < ITERATION_COUNT; ++i, low <<= 1, middle <<= 1, high <<= 1, len <<= 1)
        {
                barrier();

                for (int shift = 0; middle + shift < LINE_SIZE; shift += len)
                {
                        process(low + shift, middle + shift, min(high + shift, LINE_SIZE));
                }
        }

        barrier();

        copy_from_buffer();
}
