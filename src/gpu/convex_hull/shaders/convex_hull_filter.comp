/*
Copyright (C) 2017-2020 Topological Manifold

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

// gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID

layout(constant_id = 0) const int LINE_SIZE = 1;

// Работает только 1 поток 1 группы.
layout(local_size_x = 1) in;

// Точки с отрицательным значением минимума или максимума надо убрать.

// Входные данные 2 линии точек с координатами по X с минимумом и максимумом.
// Координата Y равна индексу для минимумов и индексу + LINE_SIZE для максимумов.
layout(std430, binding = 0) readonly restrict buffer Lines
{
        int lines[2 * LINE_SIZE];
};

// Тут результат
layout(std430, binding = 1) restrict buffer Points
{
        ivec2 points[];
};

// Количество точек результата
layout(std430, binding = 2) writeonly restrict buffer PointCount
{
        int point_count;
};

void main(void)
{
        int count = 0;

        for (int y = 0; y < LINE_SIZE; ++y)
        {
                int s = lines[y];
                if (s >= 0) // для координаты y имеется минимум по X
                {
                        points[count] = ivec2(s, y);
                        ++count;
                }
        }

        for (int y = LINE_SIZE - 1; y >= 0; --y)
        {
                int s = lines[y + LINE_SIZE];
                if (s >= 0) // для координаты y имеется максимум по X
                {
                        points[count] = ivec2(s, y);
                        ++count;
                }
        }

        if (count > 0)
        {
                points[count] = points[0];
                ++count;
        }

        point_count = count;
}
