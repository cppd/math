/*
Copyright (C) 2017-2022 Topological Manifold

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#version 460

layout(local_size_x_id = 0, local_size_y_id = 1) in;

layout(binding = 0, r32f) readonly restrict uniform image2D image_i;
layout(binding = 1, r32f) writeonly restrict uniform image2D image_dx;
layout(binding = 2, r32f) writeonly restrict uniform image2D image_dy;

const int SOBEL_DELTA = 1;

// clang-format off
const float SOBEL_DX[3][3] =
{
        {-1,  0,  1},
        {-2,  0,  2},
        {-1,  0,  1},
};
const float SOBEL_DY[3][3] =
{
        {-1, -2, -1},
        { 0,  0,  0},
        { 1,  2,  1}
};
// clang-format on

float sobel_dx(const int x, const int y)
{
        return SOBEL_DX[y + SOBEL_DELTA][x + SOBEL_DELTA];
}

float sobel_dy(const int x, const int y)
{
        return SOBEL_DY[y + SOBEL_DELTA][x + SOBEL_DELTA];
}

float pixel(const int x, const int y)
{
        const ivec2 p = clamp(ivec2(x, y), ivec2(0), imageSize(image_i) - 1);
        return imageLoad(image_i, p).r;
}

void set_dx(const ivec2 p, const float v)
{
        imageStore(image_dx, p, vec4(v, v, v, 1));
}

void set_dy(const ivec2 p, const float v)
{
        imageStore(image_dy, p, vec4(v, v, v, 1));
}

void main()
{
        const ivec2 p = ivec2(gl_GlobalInvocationID.xy);

        if (any(greaterThanEqual(p, imageSize(image_i))))
        {
                return;
        }

        float sum_x = 0;
        float sum_y = 0;

        for (int y = -SOBEL_DELTA; y <= SOBEL_DELTA; ++y)
        {
                for (int x = -SOBEL_DELTA; x <= SOBEL_DELTA; ++x)
                {
                        const float v = pixel(p.x + x, p.y + y);

                        sum_x += v * sobel_dx(x, y);
                        sum_y += v * sobel_dy(x, y);
                }
        }

        set_dx(p, sum_x);
        set_dy(p, sum_y);
}
