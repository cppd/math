/*
Copyright (C) 2017-2021 Topological Manifold

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/*
Brian Smits.
An RGB-to-Spectrum Conversion for Reflectances.
Journal of Graphics Tools, 1999.
*/

/*
Matt Pharr, Wenzel Jakob, Greg Humphreys.
Physically Based Rendering. From theory to implementation. Third edition.
Elsevier, 2017.

5.2.2 RGB color
*/

#include "rgb_samples.h"

#include "average.h"

#include <src/com/error.h>
#include <src/com/print.h>

#include <array>

namespace ns::color
{
namespace
{
using ComputeType = double;

// clang-format off
constexpr ComputeType WAVES[] =
{
         3.80000000000000000e+02,  3.90967741935483871e+02,
         4.01935483870967742e+02,  4.12903225806451613e+02,
         4.23870967741935484e+02,  4.34838709677419355e+02,
         4.45806451612903226e+02,  4.56774193548387097e+02,
         4.67741935483870968e+02,  4.78709677419354839e+02,
         4.89677419354838710e+02,  5.00645161290322581e+02,
         5.11612903225806452e+02,  5.22580645161290323e+02,
         5.33548387096774194e+02,  5.44516129032258065e+02,
         5.55483870967741935e+02,  5.66451612903225806e+02,
         5.77419354838709677e+02,  5.88387096774193548e+02,
         5.99354838709677419e+02,  6.10322580645161290e+02,
         6.21290322580645161e+02,  6.32258064516129032e+02,
         6.43225806451612903e+02,  6.54193548387096774e+02,
         6.65161290322580645e+02,  6.76129032258064516e+02,
         6.87096774193548387e+02,  6.98064516129032258e+02,
         7.09032258064516129e+02,  7.20000000000000000e+02
};
constexpr ComputeType WHITE[] =
{
         9.99244001556776396e-01,  9.98873380150820056e-01,
         9.98808959251144435e-01,  9.99597166706562734e-01,
         9.99533608153015285e-01,  9.99818142724104630e-01,
         9.99712611625371617e-01,  9.99784876760859142e-01,
         9.99817030428292397e-01,  9.99752852956163229e-01,
         9.99407327879794249e-01,  9.98699069930316541e-01,
         9.98432432164377492e-01,  9.98765031950353599e-01,
         9.98797665951587255e-01,  9.99373631837243925e-01,
         9.99859310497155263e-01,  9.99748275620055193e-01,
         9.99835944126176490e-01,  9.99744528228218576e-01,
         9.99788961269941323e-01,  9.99863180474490298e-01,
         9.99843262240867614e-01,  9.99711089580403001e-01,
         9.99685557251323464e-01,  9.99836634458908136e-01,
         9.98615323998069848e-01,  9.96920111478486137e-01,
         9.97442192355283863e-01,  9.97699702289689294e-01,
         9.97578852651525905e-01,  9.98077837717103900e-01
};
constexpr ComputeType CYAN[] =
{
         9.80016496816257132e-01,  9.71927050327868747e-01,
         9.52870360145541939e-01,  9.73978335387087224e-01,
         9.48402042171975102e-01,  9.80736584236148401e-01,
         9.82648353092833493e-01,  9.91365923116703796e-01,
         9.58011042954877046e-01,  9.82660884411277746e-01,
         9.90813015194742519e-01,  9.91534924916178895e-01,
         9.91240165893222613e-01,  9.91605352162177933e-01,
         9.90599523800954285e-01,  9.90915254706043469e-01,
         9.92807191641992604e-01,  9.93100686769205598e-01,
         9.83750254323762174e-01,  5.86703625515161864e-01,
         1.69738253880108270e-01, -7.18018374090674451e-03,
        -1.43199940606702656e-04, -7.06712241637700699e-03,
        -2.04278296081104741e-03,  6.20302180728298197e-04,
         1.15543652147459316e-02, -4.20342588746127569e-03,
         1.61097309369761035e-02,  4.63076354639339709e-03,
         5.52959125598782159e-03,  2.37690948500326217e-02
};
constexpr ComputeType MAGENTA[] =
{
         9.35562320003138659e-01,  9.31467078327201103e-01,
         9.24943324472360495e-01,  9.37498241642676033e-01,
         9.59721667287912528e-01,  9.56657816663894711e-01,
         9.61787930121071111e-01,  9.37722177442821714e-01,
         9.50199797436172666e-01,  9.61271254504822092e-01,
         6.02540681379112875e-01,  2.35366490879305697e-03,
         6.14848831219795122e-03,  2.66623697153779487e-03,
        -4.81883045411191070e-11, -8.52473464394942412e-03,
         3.19344519422546562e-03, -2.88310553956405268e-03,
         2.08939039343573996e-01,  5.94158127633480637e-01,
         9.17296074274873918e-01,  9.14741981559087258e-01,
         9.57351785499892860e-01,  9.39825578576928056e-01,
         8.91143239209656990e-01,  8.02283643882478636e-01,
         8.92988284653428499e-01,  8.91615154068267191e-01,
         9.37226064837872630e-01,  8.12095717650843318e-01,
         8.38910795701652723e-01,  7.98593695863272224e-01
};
constexpr ComputeType YELLOW[] =
{
         5.24519261723505395e-03, -4.51518445651914214e-03,
        -4.94369070049955825e-03, -6.07617627218742275e-03,
        -5.61715972931845983e-03, -2.05483497914632019e-03,
         1.57910344855930612e-02,  9.04266704587479431e-02,
         1.99655330141492449e-01,  3.40351544265346473e-01,
         5.07773118621818065e-01,  7.00186906731333880e-01,
         8.67692064506388028e-01,  9.84314634480496164e-01,
         9.89350931470895367e-01,  9.89178430462911429e-01,
         9.89040958818357963e-01,  9.89687079376923906e-01,
         9.89559654466984573e-01,  9.89173933416983342e-01,
         9.89140649664185134e-01,  9.89613233001953141e-01,
         9.89371025375349267e-01,  9.89550050850399487e-01,
         9.89128427118014963e-01,  9.89473145705947688e-01,
         9.88884795870957012e-01,  9.88889720932433880e-01,
         9.85932073954387311e-01,  9.87416908752031475e-01,
         9.82024149675078450e-01,  9.77913620650042836e-01
};
constexpr ComputeType RED[] =
{
         1.55976441799280940e-01,  1.11475026773856761e-01,
         1.16762040231888367e-01,  1.07003670069072770e-01,
         7.43318808822840821e-02,  3.03054729811132600e-02,
        -1.01612618488130801e-02,  1.69869089612432987e-02,
         5.02561719994054201e-03,  1.28492785244607565e-02,
        -5.60499249464499125e-03, -1.73561475283794098e-03,
        -9.94814318419926305e-03, -2.76423653343980079e-03,
        -1.01538381717976144e-02, -7.54910726023509150e-03,
        -2.13316868080486773e-03,  6.60584263055189348e-03,
        -7.67182893292816474e-03,  5.71872678180668781e-01,
         9.30004987743718869e-01,  9.35275812724781663e-01,
         9.44701799406275855e-01,  9.33796643693582618e-01,
         9.40308655381830394e-01,  9.48962888571785124e-01,
         9.25551573146221829e-01,  9.49000726415320406e-01,
         9.17015211653011364e-01,  9.27292166654264061e-01,
         8.79795139060852827e-01,  9.28897872325725515e-01
};
constexpr ComputeType GREEN[] =
{
         2.49309985259337213e-03, -4.72146876373780340e-03,
        -1.18069493324126969e-02, -8.89762214141937360e-03,
        -1.17870470968860930e-02, -7.44996265925719318e-03,
        -7.52383468271293227e-03, -8.80394268712453819e-03,
         6.16059638760023398e-02,  3.72380758620937224e-01,
         7.08046249841933428e-01,  9.06902664474956599e-01,
         9.39630222577077401e-01,  9.40933913807959321e-01,
         9.40426806328231613e-01,  9.40947043033141806e-01,
         9.40427136264269659e-01,  9.40164743091094324e-01,
         9.03544293704535484e-01,  5.94582888574649249e-01,
         2.42753543680664263e-01,  8.84680101042228245e-03,
        -2.89812432177394101e-03, -4.25617753786976163e-03,
        -6.48663391753658697e-03, -8.50214160022134784e-03,
        -8.08447608025851354e-03, -7.87531078421923117e-03,
        -7.40433682307678042e-03, -7.87217815671311000e-06,
         5.10974531416909586e-03, -2.61085999634628986e-03
};
constexpr ComputeType BLUE[] =
{
         9.33563949530071491e-01,  9.30427169218663419e-01,
         9.36662373405797943e-01,  9.36570876291807242e-01,
         9.33297420143475387e-01,  9.41243158133269975e-01,
         9.40703382095392948e-01,  9.40888216414243916e-01,
         9.26922754297345719e-01,  7.43670879589024225e-01,
         5.27733488990336008e-01,  3.11785844616707331e-01,
         1.28845586012296620e-01,  1.77989270726439663e-02,
        -4.81131144475303813e-06, -3.98941590709862523e-04,
        -3.94604521085437500e-04,  1.64421194764339043e-03,
         3.57572097271510649e-03, -5.18504878870999124e-04,
        -4.11373797874705859e-05,  7.13979061455575614e-03,
         2.42737073845013321e-02,  3.59164423170830124e-02,
         4.65697008099570098e-02,  4.66698287449868326e-02,
         4.68757451549693255e-02,  3.74902973121443162e-02,
         2.87014644659370696e-02,  1.99897145340918563e-02,
         6.54903367101993678e-03,  3.92713640204526721e-03
};
// clang-format on

template <std::size_t COUNT>
std::vector<float> rgb_samples(const ComputeType (&samples)[COUNT], int from, int to, int count)
{
        static_assert(COUNT == 32);

        return average(std::to_array(WAVES), std::to_array(samples), from, to, count);
}
}

std::vector<float> rgb_white_samples(int from, int to, int count)
{
        return rgb_samples(WHITE, from, to, count);
}

std::vector<float> rgb_cyan_samples(int from, int to, int count)
{
        return rgb_samples(CYAN, from, to, count);
}

std::vector<float> rgb_magenta_samples(int from, int to, int count)
{
        return rgb_samples(MAGENTA, from, to, count);
}

std::vector<float> rgb_yellow_samples(int from, int to, int count)
{
        return rgb_samples(YELLOW, from, to, count);
}

std::vector<float> rgb_red_samples(int from, int to, int count)
{
        return rgb_samples(RED, from, to, count);
}

std::vector<float> rgb_green_samples(int from, int to, int count)
{
        return rgb_samples(GREEN, from, to, count);
}

std::vector<float> rgb_blue_samples(int from, int to, int count)
{
        return rgb_samples(BLUE, from, to, count);
}
}
