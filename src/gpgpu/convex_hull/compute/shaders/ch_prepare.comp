/*
Copyright (C) 2017-2019 Topological Manifold

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

// gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID

#if !defined(VULKAN)
// Вставляется в текст программы
// const uint GROUP_SIZE =
// const int LINE_SIZE =
layout(local_size_x = GROUP_SIZE) in;
layout(bindless_image, r32i) readonly restrict uniform iimage2D objects;
#else
layout(constant_id = 0) const int LINE_SIZE = 1;
layout(local_size_x_id = 1) in;
layout(binding = 1, r32i) readonly restrict uniform iimage2D objects;
#endif

layout(std430, binding = 0) writeonly restrict buffer Lines
{
        float line_min[LINE_SIZE];
        float line_max[LINE_SIZE];
};

bool not_background(ivec2 p)
{
        ivec4 s = imageLoad(objects, p);
        return s.r != 0;
}

// В x пишутся минимумы, в y пишутся максимумы
shared ivec2 shared_buffer[gl_WorkGroupSize.x];

void main(void)
{
        // Одна группа обрабатывает одну строку
        // gl_LocalInvocationID.x координата X по горизонтали
        // gl_WorkGroupID.x координата Y по вертикали

        const ivec2 image_size = imageSize(objects);

        const int local_id = int(gl_LocalInvocationID.x);
        const int y = int(gl_WorkGroupID.x);
        const int group_size = int(gl_WorkGroupSize.x);

        int min_x = 1000000;
        int max_x = -1000000;

        for (int x = local_id; x < image_size.x; x += group_size)
        {
                if (not_background(ivec2(x, y)))
                {
                        min_x = min(min_x, x);
                        max_x = max(max_x, x);
                }
        }

        shared_buffer[local_id] = ivec2(min_x, max_x);

        barrier();

        for (int stride = group_size >> 1; stride >= 1; stride >>= 1)
        {
                if (local_id < stride)
                {
                        ivec2 x1 = shared_buffer[local_id];
                        ivec2 x2 = shared_buffer[local_id + stride];
                        shared_buffer[local_id] = ivec2(min(x1.x, x2.x), max(x1.y, x2.y));
                }
                barrier();
        }

        if (local_id == 0)
        {
                ivec2 result = shared_buffer[0];

                // objects имеет 0 по вертикали внизу, надо записать с 0 вверху
                int reverse_y = image_size.y - y - 1;

                if (result.y >= 0)
                {
                        line_min[reverse_y] = result.x;
                        line_max[reverse_y] = result.y;
                }
                else
                {
                        line_min[reverse_y] = -1;
                        line_max[reverse_y] = -1;
                }
        }
}
