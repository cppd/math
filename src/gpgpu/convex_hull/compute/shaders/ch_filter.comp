/*
Copyright (C) 2017-2019 Topological Manifold

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

// gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID

#if !defined(VULKAN)
// Вставляется в текст программы
// const int LINE_SIZE =
#else
layout(constant_id = 0) const int LINE_SIZE = 1;
#endif

// Работает только 1 поток 1 группы.
layout(local_size_x = 1) in;

// Точки с отрицательным значением минимума или максимума надо убрать.

// Входные данные 2 линии точек с координатами по X с минимумом и максимумом.
// Координата Y равна индексу.
layout(std430, binding = 0) readonly restrict buffer Lines
{
        float line_min[LINE_SIZE];
        float line_max[LINE_SIZE];
};
// Тут результат
layout(std430, binding = 1) writeonly restrict buffer Points
{
        vec2 points[];
};
// Количество точек результата
layout(std430, binding = 2) writeonly restrict buffer PointCount
{
        int point_count;
};

void main(void)
{
        int count = 0;

        float y;

        y = 0;
        for (int i = 0; i < LINE_SIZE; ++i, ++y)
        {
                float s = line_min[i];
                if (s >= 0) // для координаты Y==i имеется минимум по X
                {
                        points[count] = vec2(s, y);
                        ++count;
                }
        }

        y = LINE_SIZE - 1;
        for (int i = LINE_SIZE - 1; i >= 0; --i, --y)
        {
                float s = line_max[i];
                if (s >= 0) // для координаты Y==i имеется максимум по X
                {
                        points[count] = vec2(s, y);
                        ++count;
                }
        }

        point_count = count;
}
