/*
Copyright (C) 2017-2019 Topological Manifold

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#if !defined(VULKAN)
// Вставляется в текст программы
// const uint GROUP_SIZE =
layout(local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE) in;
layout(bindless_image, r32f, location = 0) readonly uniform image2D img_big;
layout(bindless_image, r32f, location = 1) writeonly uniform image2D img_small;
#else
layout(local_size_x_id = 0, local_size_y_id = 0) in;
layout(binding = 1, r32f) readonly uniform image2D img_big;
layout(binding = 2, r32f) writeonly uniform image2D img_small;
#endif

// clang-format off
// GaussianMatrix[2]
const int delta = 2;
const float filter_2d[5][5] =
{
        {0.002589,  0.0107788, 0.0241466, 0.0107788, 0.002589},
        {0.0107788, 0.0448755, 0.10053,   0.0448755, 0.0107788},
        {0.0241466, 0.10053,   0.225206,  0.10053,   0.0241466},
        {0.0107788, 0.0448755, 0.10053,   0.0448755, 0.0107788},
        {0.002589,  0.0107788, 0.0241466, 0.0107788, 0.002589}
};
const float filter_1d[5] = {0.05088, 0.21184, 0.47456, 0.21184, 0.05088};
// clang-format on

bool point_inside_big(ivec2 p)
{
        return all(lessThanEqual(ivec2(0), p)) && all(lessThan(p, imageSize(img_big)));
}

float get_big(ivec2 p)
{
        return imageLoad(img_big, p).r;
}

void set_small(ivec2 p, float v)
{
        imageStore(img_small, p, vec4(v, v, v, 1));
}

void main(void)
{
        const ivec2 p_small = ivec2(gl_GlobalInvocationID.xy);

        if (any(greaterThanEqual(p_small, imageSize(img_small))))
        {
                return;
        }

        int kx = imageSize(img_big).x > imageSize(img_small).x ? 2 : 1;
        int ky = imageSize(img_big).y > imageSize(img_small).y ? 2 : 1;

        const ivec2 p_big = ivec2(p_small.x * kx, p_small.y * ky);

        float sum_image = 0;
        float sum_filter = 0;

        if (kx > 1 && ky > 1)
        {
                for (int j = -delta; j <= delta; ++j)
                {
                        for (int i = -delta; i <= delta; ++i)
                        {
                                ivec2 pd = ivec2(p_big.x + i, p_big.y + j);
                                if (point_inside_big(pd))
                                {
                                        float m = filter_2d[j + delta][i + delta];
                                        sum_image += get_big(pd) * m;
                                        sum_filter += m;
                                }
                        }
                }
        }
        else if (kx > 1)
        {
                for (int i = -delta; i <= delta; ++i)
                {
                        ivec2 pd = ivec2(p_big.x + i, p_big.y);
                        if (point_inside_big(pd))
                        {
                                float m = filter_1d[i + delta];
                                sum_image += get_big(pd) * m;
                                sum_filter += m;
                        }
                }
        }
        else if (ky > 1)
        {
                for (int i = -delta; i <= delta; ++i)
                {
                        ivec2 pd = ivec2(p_big.x, p_big.y + i);
                        if (point_inside_big(pd))
                        {
                                float m = filter_1d[i + delta];
                                sum_image += get_big(pd) * m;
                                sum_filter += m;
                        }
                }
        }
        else
        {
                sum_image = get_big(p_big);
                sum_filter = 1;
        }

        set_small(p_small, sum_image / sum_filter);
}
