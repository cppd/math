/*
Copyright (C) 2017, 2018 Topological Manifold

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

// gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID

// Вставляется в текст программы
// const uvec2 GROUP_SIZE =

layout(local_size_x = GROUP_SIZE.x, local_size_y = GROUP_SIZE.y) in;

// Перенос данных изображения в исходные данные для ДПФ.
// Преобразование Фурье делается для яркости пикселов без цвета.

layout(location = 0) uniform int width;
layout(location = 1) uniform int height;
layout(location = 2) uniform bool source_srgb;

layout(bindless_image, rgba32f, location = 3) uniform readonly restrict image2D img;

layout(std430, binding = 0) writeonly restrict buffer StorageBuffer
{
        complex data[];
};

void main()
{
        int x = int(gl_GlobalInvocationID.x);
        int y = int(gl_GlobalInvocationID.y);

        if (x >= width || y >= height)
        {
                return;
        }

        vec4 pixel = imageLoad(img, ivec2(x, y));
        float_point gr = source_srgb ? luminance_of_rgb(srgb_to_rgb(pixel)) : luminance_of_rgb(pixel);
        data[y * width + x] = complex(gr, 0);
}
