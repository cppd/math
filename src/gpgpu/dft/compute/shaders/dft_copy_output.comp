/*
Copyright (C) 2017, 2018 Topological Manifold

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

// gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID

// Вставляется в текст программы
// const uvec2 GROUP_SIZE =

layout(local_size_x = GROUP_SIZE.x, local_size_y = GROUP_SIZE.y) in;

// Перенос данных ДПФ обратно в изображение.

layout(location = 0) uniform float_point to_mul;

layout(bindless_image, rgba32f, location = 1) uniform writeonly restrict image2D img;

layout(std430, binding = 0) readonly restrict buffer StorageBuffer
{
        complex data[];
};

void main()
{
        const ivec2 p = ivec2(gl_GlobalInvocationID.xy);

        if (any(greaterThanEqual(p, imageSize(img))))
        {
                return;
        }

        const int width = imageSize(img).x;

        complex d = data[p.y * width + p.x];
        vec4 pixel = vec4(vec3(to_mul * length(d)), 1);
        imageStore(img, p, pixel);
}
