/*
Copyright (C) 2017, 2018 Topological Manifold

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

// Вставляется в текст программы
// const uint GROUP_SIZE =

layout(local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE) in;

layout(bindless_image, rgba32f) readonly uniform image2D img_input;
layout(bindless_image, rgba32f) writeonly uniform image2D img_output;
layout(bindless_image, r32i) readonly uniform iimage2D img_objects;

uniform bool source_srgb;

// clang-format off
//GaussianMatrix[{4, 3}]
const int delta = 4;
const float Gauss[delta * 2 + 1][delta * 2 + 1] =
{
        {0.00378449, 0.00564742, 0.00754943, 0.00900273, 0.00955004, 0.00900273, 0.00754943, 0.00564742, 0.00378449},
        {0.00564742, 0.00842740, 0.01126570, 0.01343440, 0.01425110, 0.01343440, 0.01126570, 0.00842740, 0.00564742},
        {0.00754943, 0.01126570, 0.01505990, 0.01795900, 0.01905080, 0.01795900, 0.01505990, 0.01126570, 0.00754943},
        {0.00900273, 0.01343440, 0.01795900, 0.02141610, 0.02271810, 0.02141610, 0.01795900, 0.01343440, 0.00900273},
        {0.00955004, 0.01425110, 0.01905080, 0.02271810, 0.02409920, 0.02271810, 0.01905080, 0.01425110, 0.00955004},
        {0.00900273, 0.01343440, 0.01795900, 0.02141610, 0.02271810, 0.02141610, 0.01795900, 0.01343440, 0.00900273},
        {0.00754943, 0.01126570, 0.01505990, 0.01795900, 0.01905080, 0.01795900, 0.01505990, 0.01126570, 0.00754943},
        {0.00564742, 0.00842740, 0.01126570, 0.01343440, 0.01425110, 0.01343440, 0.01126570, 0.00842740, 0.00564742},
        {0.00378449, 0.00564742, 0.00754943, 0.00900273, 0.00955004, 0.00900273, 0.00754943, 0.00564742, 0.00378449}
};
// clang-format on

// фоновые пиксели считать 0
const float background_value = 0;

bool background(ivec2 p)
{
        ivec4 s = imageLoad(img_objects, p);
        return s.r == 0;
}

float grayscale(vec4 color)
{
        return !source_srgb ? luminance_of_rgb(color) : luminance_of_rgb(srgb_to_rgb(color));
}

vec4 source_color_to_rgb(vec4 color)
{
        return !source_srgb ? color : srgb_to_rgb(color);
}

bool point_inside_input(ivec2 p)
{
        return all(lessThanEqual(ivec2(0), p)) && all(lessThan(p, imageSize(img_input)));
}

void main(void)
{
        const ivec2 p = ivec2(gl_GlobalInvocationID.xy);

        if (any(greaterThanEqual(p, imageSize(img_input))))
        {
                return;
        }

        vec4 s = imageLoad(img_input, p);

        if (background(p))
        {
                imageStore(img_output, p, source_color_to_rgb(s));
                return;
        }

        float sum = 0;
        for (int i = -delta; i <= delta; ++i)
        {
                for (int j = -delta; j <= delta; ++j)
                {
                        const ivec2 p2 = ivec2(p.x + i, p.y + j);
                        float gr;
                        if (point_inside_input(p2) && !background(p2))
                        {
                                gr = grayscale(imageLoad(img_input, p2));
                        }
                        else
                        {
                                gr = background_value;
                        }

                        sum += gr * Gauss[i + delta][j + delta];
                }
        }

        float res;
        res = (sum != 0) ? (grayscale(s) / sum) : 1;
        // res = clamp ((res - 0.5f) / (1.0f - 0.5f), 0.0f, 1.0f);
        // res *= res;

        imageStore(img_output, p, vec4(vec3(res), 1));
}
