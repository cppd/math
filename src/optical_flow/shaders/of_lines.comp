/*
Copyright (C) 2017 Topological Manifold

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

layout(local_size_variable) in;

layout(std430, binding = 0) readonly buffer StorageBufferPoints
{
        ivec2 points[];
};
layout(std430, binding = 1) readonly buffer StorageBufferPointsFlow
{
        vec2 points_flow[];
};
layout(std430, binding = 2) writeonly buffer StorageBufferPointsLines
{
        ivec2 points_lines[];
};

uniform int point_count_x;
uniform int point_count_y;

void main(void)
{
        const ivec2 p = ivec2(gl_GlobalInvocationID.xy);

        if (p.x >= point_count_x || p.y >= point_count_y)
        {
                return;
        }

        int index = p.y * point_count_x + p.x;

        ivec2 optical_flow = ivec2(round(points_flow[index]));

        ivec2 line_begin = points[index];
        ivec2 line_end = line_begin + optical_flow;

        points_lines[2 * index] = line_begin;
        points_lines[2 * index + 1] = line_end;
}
