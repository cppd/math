/*
Copyright (C) 2017, 2018 Topological Manifold

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

// gl_GlobalInvocationID = gl_WorkGroupID * gl_LocalGroupSizeARB + gl_LocalInvocationID

layout(local_size_variable) in;

layout(location = 0) uniform bool inverse_dft;
layout(location = 1) uniform uint max_threads;
layout(location = 2) uniform uint N_2_mask;
layout(location = 3) uniform uint N_2_bits;
layout(location = 4) uniform uint M_2;
layout(location = 5) uniform float_point Two_PI_Div_M;

layout(std430, binding = 0) buffer StorageBuffer
{
        complex data[];
};

void main()
{
        uint thread_id = gl_GlobalInvocationID.x;
        if (thread_id >= max_threads)
        {
                return;
        }

        // номер задачи внутри одного БПФ
        uint i = thread_id & N_2_mask;
        // начало ДПФ
        uint N_base = (thread_id - i) << 1;

        uint idx = i & (M_2 - 1);
        uint base = (i - idx) << 1;

        uint index_t = N_base + base + idx;
        uint index_u = index_t + M_2;

        complex v_t = data[index_t];
        complex v_u = data[index_u];

        complex twiddle_factor = complex(cos(Two_PI_Div_M * idx), sin(Two_PI_Div_M * idx));

        complex k = mul(twiddle_factor, v_u);

        if (!inverse_dft)
        {
                data[index_t] = v_t + k;
                data[index_u] = v_t - k;
        }
        else
        {
                data[index_t] = (v_t + k) * 0.5;
                data[index_u] = (v_t - k) * 0.5;
        }
}
